/* 

### 정규표현식 (regular exxpression)
    - 패턴과 플래그로 구성된 문자열에서 서브문자열을 탐색하기 위한 표현식
        // : 정규표현식 리터럴 
        '/패턴/플래그' 문법을 사용

    - 패턴
        \d : 숫자하나
        \D : 숫자가 아닌것 하나
        \w : 알파벳이나 숫자나 언더스코어 하나
        \W : 알파벳이나 숫자나 언더스코어가 아닌것 하나
        \s : 공백문자 하나
        \S : 공백문자 하나가 아닌것
        .  : 문자 하나
        ?  : 문자 0개 또는 1개
        *  : 문자 0개 또는 1개 이상
        +  : 문자 1개 이상
        {n}: n번 반복
        {n,m} : 최소 n번, 최대 m번
        |  : or
        [] : or 
        ^  : 시작
        $  : 끝
        [^]: 부정 not
        

    - 플래그
        i : 대소문자 구별 안함 (ignore case)
        g : 전체문자열에서 검색 (global)
        m : 문자열이 여러 라인일때 여러 라인에서 모두 검색 (multi line)


### 정규표현식 메소드
    1. RegExp 객체 메소드
        test() : 정규표현식에 일치하는 문자열이 있는지 true ,false로 반환
        exec() : 정규표현식에 일치하는 문자열을 반환 

    2. String 객체 메소드
        match() : 정규표현식에 일치하는 문자열을 반환
        replace() : 정규표현식에 일치하는 문자열을 다른 문자열로 대체
        search() : 정규표현식에 일치하는 첫번째 문자열의 인덱스를 반환
*/

// 실습
// 1) 아이디 : 문자로 시작하고 문자 또는 숫자 또는 _ 만 허용
//              최소 8자리, 최대 12자리 
const strId = 'abcd1234';
const id = /^[A-Za-z]\w{7,11}$/;
console.log(id.test(strId));

// 2) 주민번호 : 숫자6자리-숫자7자리
//              년도 2자리, 월2자리, 일2자리 - 성별숫자(1~4)숫자6개
const strno = '990101-4234567'
const no = /^\d{2}(0[1-9]|1(0|1|2))(0[1-9]|1[0-9]|2[1-9]|3[0-1])-[1-4]\d{6}$/;
console.log(no.test(strno));

// 3) 아이피주소 : 숫자1~3자리.숫자3자리.숫자4자리.숫자3자리(숫자는 0~255로 제한)
const strIp = '10.100.10.20';
// const ip = /^\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}$/;
const ip = /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$/;
console.log(ip.test(strIp));




